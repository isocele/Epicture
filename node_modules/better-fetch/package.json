{
  "_from": "better-fetch",
  "_id": "better-fetch@1.1.2",
  "_inBundle": false,
  "_integrity": "sha1-wwJCEJbGcr/JU6hGEEo7zeA5hAM=",
  "_location": "/better-fetch",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "better-fetch",
    "fetchSpec": "latest",
    "name": "better-fetch",
    "raw": "better-fetch",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/better-fetch/-/better-fetch-1.1.2.tgz",
  "_shasum": "c302421096c672bfc953a846104a3bcde0398403",
  "_spec": "better-fetch",
  "_where": "/home/Alexandre/DEV_epicture_2018",
  "author": {
    "name": "Swizec Teller"
  },
  "babel": {
    "presets": [
      "latest"
    ]
  },
  "bugs": {
    "url": "https://github.com/Swizec/better-fetch/issues"
  },
  "bundleDependencies": false,
  "dependencies": {},
  "deprecated": false,
  "description": "A tiny ES6 fetch() wrapper that makes your life easier.",
  "devDependencies": {
    "babel-cli": "^6.18.0",
    "babel-preset-latest": "^6.16.0"
  },
  "homepage": "https://github.com/Swizec/better-fetch#readme",
  "keywords": [
    "api",
    "es6",
    "fetch",
    "json"
  ],
  "license": "MIT",
  "main": "lib/index.js",
  "name": "better-fetch",
  "optionalDependencies": {},
  "readme": "# better-fetch\n\nA tiny ES6 fetch() wrapper that makes your life easier.\n\nWithout changing the API, better-fetch **automatically includes cookies**, which would have saved me a very frustrating amount of time yesterday,  lets you **add default headers**, and you can **pass request body as a plain JS object**, none of that `FormData` nonsense.\n\n`better-fetch` works the same as `fetch()`, but is less cumbersome to use.\n\n## In practice better-fetch looks like this:\n\nYou install with npm. Or whatever you use to install packages from npmjs.org. Yarn maybe?\n\n```\n$ npm install --save better-fetch\n```\n\nThen you set up headers that every one of your `fetch()` calls needs. My backend requires an `Authorization`, and an `Accept` header from all calls.\n\n<pre lang=\"javascript\">\n// top of project\n// src/index.js\n\nimport fetch from 'better-fetch';\n\nfetch.setDefaultHeaders({\n    Authorization: `Token token=${GlobalTokenValue}`,\n    Accept: \"application/json.v2\"\n});\n\n// ^ this is optional and depends on your use-case ^\n</pre>\n\nYou can then use `better-fetch` anywhere in your code as you normally would with `fetch()`. The API feels the same and promises work just like you'd expect.\n\n<pre lang=\"javascript\">\n// any file\nimport fetch from 'better-fetch';\n\nfetch('/api/some/thing')\n  .then(response => response.json())\n\t.then(json => {\n\t\t// do stuff\n\t});\n</pre>\n\nThis code fetches JSON document with a `GET` request to the `/api/some/thing` URL. Any default headers are set in the request and cookies are sent as well.\n\nPOST-ing is also made less cumbersome:\n\n<pre lang=\"javascript\">\n// any file\nimport fetch from 'better-fetch';\n\nconst data = {\n\tkey: 'value',\n\tkey2: 'value2'\n};\n\nfetch('/api/save_response', {method: 'POST',\n                             body: data})\n          .then(response => response.json())\n          .then(json => {\n              console.log(json);\n          });\n</pre>\n\nA dictionary `body` is automatically transformed into a `FormData` object, strings and FormData objects are let through. This gives you flexibility to work with any API backend, but still makes your life easier.\n\nSimilarly, you can specify headers as either a `Headers` object or a dictionary - better-fetch has you covered.\n\nHappy hacking ðŸ¤“\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/Swizec/better-fetch.git"
  },
  "scripts": {
    "build": "babel src -d lib",
    "postversion": "git push && git push --tags && rm -rf build/temp",
    "preversion": "",
    "test": "echo \"Error: no test specified\" && exit 1",
    "version": "npm run build && git add -A lib"
  },
  "version": "1.1.2"
}
